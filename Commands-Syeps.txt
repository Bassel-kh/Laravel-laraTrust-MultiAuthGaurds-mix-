#0 -------------------------
init

#1 ----------------------------
Laravel 7 redirect different pages users after login. Admin and User login redirect different page
        $ composer require laravel/ui

        $ php artisan ui bootstrap --auth
        $ php artisan ui vue --auth

        $ npm install && npm run dev

#2 ----------------------------
    Add Controllers
    - User
    - Admin

    $ php artisan make:controller AdminController
    $ php artisan make:controller UserController

       Add index Methods to controllers :
            public function index()
            {
                return view('View_name');
            }

    - Create new Two folders in Views:
            Admin Folder
            User Folder

            Note: the code in them == code in home page

#3 ----------------------------
Install Laratrust
    https://laratrust.santigarcor.me/docs/6.x/

    Installation
    1- You can install the package using composer:

        $ composer require santigarcor/laratrust

    2- Publish all the configuration files:

        $ php artisan vendor:publish --tag="laratrust"

        [WARNING]
            If this command did not publish any files, chances are, the Laratrust service provider hasn't been registered.
            Try clearing your configuration cache

                $ php artisan config:clear

    3- Run the setup command:
        [IMPORTANT]
            Before running the command go to your config/laratrust.php file and change the values according to your needs.

        $ php artisan laratrust:setup

        This command will generate the migrations, create the Role and Permission models (if you are using the teams feature it will also create a Team model)
        and will add the trait to the configured user models.

         Output: {

                Creating migration
                Migration created successfully.


                Creating Role model
                Role model created successfully.

                Creating Permission model
                Permission model created successfully.

                Adding LaratrustUserTrait to User model
                LaratrustUserTrait added successfully to App\User

         }
    -----------------------
    ######################
    4- Dump the autoloader:
         $ composer dump-autoload

    5- Run the migrations:
         $ php artisan migrate

    IMPORTANT

    If you did the steps above you are done with the configuration,
    if not, please read and follow the whole configuration process
    ///////////////////////////////////////////////////////////////////
        Migrations
        The migration will create five (or six if you use teams feature) tables in your database:

        roles — stores role records.
        permissions — stores permission records.
        teams — stores teams records (Only if you use the teams feature).
        role_user — stores polymorphic relations between roles and users.
        permission_role — stores many-to-many relations between roles and permissions.
        permission_user — stores polymorphic relations between users and permissions.

        ///////////////////////////////////////////////////////////////////
        Teams Feature
        NOTE

        The teams feature is optional, this part covers how to configure it after the installation.

        If you had your teams.enabled value set to true during the installation and automatic setup, you can skip this part.

        Set the teams.enabled value to true in your config/laratrust.php file.

        Run:

            $ php artisan laratrust:setup-teams
        Run:

            $ php artisan migrate

        Now you can use the teams feature in you code.

        Please refer to the teams concepts concepts to learn how to use them.

***** Some Info
        //////////////////////////////////////////////////////////////////////
            Role
                <?php

                namespace App;

                use Laratrust\Models\LaratrustRole;

                class Role extends LaratrustRole
                {
                }

            The Role model has three main attributes:

            name — Unique name for the Role, used for looking up role information in the application layer. For example: "admin", "owner", "employee".
            display_name — Human readable name for the Role. Not necessarily unique and optional. For example: "User Administrator", "Project Owner", "Widget Co. Employee".
            description — A more detailed explanation of what the Role does. Also, optional.
            Both display_name and description are optional; their fields are nullable in the database.

        /////////////////////////////////////////////////////////////////

                    Permission
                        <?php

                        namespace App;

                        use Laratrust\Models\LaratrustPermission;

                        class Permission extends LaratrustPermission
                        {
                        }
                    The Permission model has the same three attributes as the Role:
                        - name — Unique name for the permission, used for looking up permission information in the application layer. For example: "create-post", "edit-user", "post-payment", "mailing-list-subscribe".
                        - display_name — Human readable name for the permission. Not necessarily unique and optional. For example "Create Posts", "Edit Users", "Post Payments", "Subscribe to mailing list".
                        - description — A more detailed explanation of the Permission.
                    In general, it may be helpful to think of the last two attributes in the form of a sentence: "The permission display_name allows a user to description."

                /////////////////////////////////////////////////////////////////

                    Team
                    IMPORTANT

                    Only applies if you are using the teams feature.

                            <?php

                            namespace App;

                            use Laratrust\Models\LaratrustTeam;

                            class Team extends LaratrustTeam
                            {
                            }
                    The Team model has three main attributes:
                        - name — Unique name for the Team, used for looking up team information in the application layer. For example: "my-team", "my-company".
                        - display_name — Human readable name for the Team. Not necessarily unique and optional. For example: "My Team", "My Company".
                        - description — A more detailed explanation of what the Team does. Also, optional.
                    Both display_name and description are optional; their fields are nullable in the database.

                    /////////////////////////////////////////////////////////////////

                        User
                            <?php

                            use Laratrust\Traits\LaratrustUserTrait;

                            class User extends Model
                            {
                                use LaratrustUserTrait; // add this trait to your user model

                                ...
                            }
                        This class uses the LaratrustUserTrait to enable the relationships with Role and Permission.
                            It also adds the following methods roles(), hasRole($name), hasPermission($permission),
                                isAbleTo($permission), ability($roles, $permissions, $options), and rolesTeams() to the model.

                        /////////////////////////////////////////////////////////////////

#4 ----------------------------
Seeder
    Laratrust comes with a database seeder, this seeder helps you fill the permissions for each role
    depending on the module, and creates one user for each role.

    [NOTE]

        The seeder is going to work with the first user model inside the user_models array.
        The seeder doesn't support teams.

    1- To generate the seeder you have to run:

            $ php artisan laratrust:seeder
            and
            $ composer dump-autoload
            ------------------------
            ########################

    2- In the database/seeds/DatabaseSeeder.php file you have to add this to the run method:

           $this->call(LaratrustSeeder::class);

       [NOTE]
            If you have not run php artisan vendor:publish --tag="laratrust"
            you should run it in order to customize the roles, modules and permissions in each case.

            ////////////////// Begin Info /////////////////////
            Your config/laratrust_seeder.php file looks like this by default:

            return [
                ...
                'roles_structure' => [
                    'superadministrator' => [
                        'users' => 'c,r,u,d',
                        'payments' => 'c,r,u,d',
                        'profile' => 'r,u'
                    ],
                    'administrator' => [
                        'users' => 'c,r,u,d',
                        'profile' => 'r,u'
                    ],
                    'user' => [
                        'profile' => 'r,u',
                    ],
                    'role_name' => [
                        'module_1_name' => 'c,r,u,d',
                    ]
                ],
                'permissions_map' => [
                    'c' => 'create',
                    'r' => 'read',
                    'u' => 'update',
                    'd' => 'delete'
                ],
                ...
            ];

            To understand the role_structure you must know:

            The first level represents the roles.
            The second level represents the modules.
            The second level assignments are the permissions.
            With that in mind, you should arrange your roles, modules and permissions like this:

            return [
                'role_structure' => [
                    'role' => [
                        'module' => 'permissions',
                    ],
                ]
            ];
            #Permissions
            In case that you do not want to use the c,r,u,d permissions, you should change the permissions_map.

            For example:

            return [
                ...
                'roles_structure' => [
                    'role_name' => [
                        'module_1_name' => 'a,s,e,d',
                    ]
                ],
                'permissions_map' => [
                    'a' => 'add',
                    's' => 'show',
                    'e' => 'edit',
                    'd' => 'destroy'
                ],
                ...
            ];
            ////////////////// End Info /////////////////////
    3-
            $ php artisan db:seed

    4- to seed user
            create_users value on the laratrust_seeder config file to true

                $ php artisan db:seed
#5 ---------------------------
Administration Panel
    Laratrust comes with a simple administration panel for roles, permissions and their assignment to the users.

    Currently it supports:

        1- Permissions CRUD.
        2- Roles CRUD and permissions assignment.
        3- Assignment of roles and permission to the multiple users defined in user_models in the config/laratrust.php file.
        4- Restricting roles from being edited, deleted or removed.

        #How to use it
            1- Go to your config/laratrust.php file and change the panel.register value to true.
            2- Publish the assets used by the panel by running:
                    $ php artisan vendor:publish --tag=laratrust-assets --force

            By default the URL to access the panel is /laratrust.

            To customize the the URL and other available settings in the panel please
            go to the panel section in the config/laratrust.php file.

/////////////////////////////////////////////////////////////////////////////////////////////////
                                 Add Middleware and Guards Auth
/////////////////////////////////////////////////////////////////////////////////////////////////

#6 --------------------------------
    Edit Controller: To user Role Laratrust $ Migrate Admin and Customer

        1- Add to Admin Controller:

                public function __construct()
                {
                    $this->middleware('role:superadministrator');
                }

        2- Add to User Controller:

                    public function __construct()
                    {
                        $this->middleware('role:user');

                    }

        3- Middleware for LaraTrust
           #Configuration
           The middleware are registered automatically as role, permission and ability .
           If you want to change or customize them, go to your

            {   config/laratrust.php and set the middleware.register value to false }

            and add the following to the routeMiddleware array in { app/Http/Kernel.php }:

               'role' => \Laratrust\Middleware\LaratrustRole::class,
               'permission' => \Laratrust\Middleware\LaratrustPermission::class,
               'ability' => \Laratrust\Middleware\LaratrustAbility::class,

        4- *****Create migration for admins
               To make the admins table, run the following command:

                   $ php artisan make:migration create_admins_table

               From the database/migrations directory, open the admins migrations file and edit it as follows:
               // database/migrations/<timestamp>_create_admins_table.php

                   [...]
                   public function up()
                       {
                           Schema::create('admins', function (Blueprint $table) {
                               $table->id();
                               $table->string('name');
                               $table->string('email')->unique();
                               $table->timestamp('email_verified_at')->nullable();
                               $table->string('password');
                               $table->boolean('is_super')->default(false);
                               $table->rememberToken();
                               $table->timestamps();
                           });
                       }
                   [...]

               We have created a simple migration and defined the columns we want the admin table to have.
               Eloquent provides methods that represent datatypes of our database table. We use them to define
               the datatypes of our table columns.

        5- *****Create migration for customers
                To make the customers table, run the following command:

                    $ php artisan make:migration create_customers_table
                Now, open the customers migrations file and edit it as follows:

                    database/migrations/<timestamp>_create_customers_table.php
                    [...]
                    public function up()
                    {
                        Schema::create('customers', function (Blueprint $table) {
                            $table->increments('id');
                            $table->string('name');
                            $table->string('email')->unique();
                            $table->timestamp('email_verified_at')->nullable();
                            $table->string('password');
                            $table->boolean('is_editor')->default(false);
                            $table->rememberToken();
                            $table->timestamps();

                        });
                    }
                    [...]
                We just created a simple migration and defined the columns we want the customers table to have.
                Eloquent provides methods that represent datatypes of our database table, so it is easy to decide what
                we want each one to be.

        6- *****Migrate the database
             Now that we have defined our tables, let us migrate the database:

                 $ php artisan migrate


#7 --------------------------
Set up the models
    [Note]: {
        Add to all Models this line To user laratrust:

        <?php

        use Laratrust\Traits\LaratrustUserTrait;

        class User extends Model
        {
            use LaratrustUserTrait; // add this trait to your user model

            ...
        }

        This class uses the LaratrustUserTrait to enable the relationships with Role and Permission.
        It also adds the following methods roles(), hasRole($name), hasPermission($permission), isAbleTo($permission),
        ability($roles, $permissions, $options), and rolesTeams() to the model.
    }

    We have different classes of users for our application, and they use different database tables.
    To use these different tables for authentication, we have to define models for them.
    These models will be like the user model and extends the Authenticable class.

    1- *****Admin model
        To make the model for the admins, run the following command:

            $ php artisan make:model Admin

        Open the Admin model in app/Admin.php and add the following:

            // app/Admin.php
            <?php

            namespace App;

            use Illuminate\Notifications\Notifiable;
            use Illuminate\Foundation\Auth\User as Authenticatable;
            //////////////////////////
            use Laratrust\Traits\LaratrustUserTrait; // To Use LaraTrust
            /////////////////////////
            class Admin extends Authenticatable
            {
                use Notifiable;
                use LaratrustUserTrait; // LaraTrust

                protected $guard = 'admin';

                protected $fillable = [
                    'name', 'email', 'password',
                ];

                protected $hidden = [
                    'password', 'remember_token',
                ];
            }

            When you intend to use a model for authentication, and you plan to not use the default user guard,

            it is important you specify the guard it will use. In our case, it will use the admin guard.

            We also defined some of our database columns as fillable by putting them in the fillable array. This tells Laravel the following about the model:

            When I call your create or update method and I pass you an array, take only these items (read: items in the fillable array).

            This way, we will prevent a scenario where a user can bypass any of our checks and insert or update a record we do not wish for them to update.

            For the hidden array, we tell Laravel not to return those columns when we return the model to either our API or view.


    2- *****Customers model

     To make the model for the customers, run the following command:

         $ php artisan make:model Customer
     Then open the Customer model and replace with the following:

         // app/Customer.php
         <?php

         namespace App;

         use Illuminate\Notifications\Notifiable;
         use Illuminate\Foundation\Auth\User as Authenticatable;
         //////////////////////////
         use Laratrust\Traits\LaratrustUserTrait; // To Use LaraTrust
         /////////////////////////

         class Customer extends Authenticatable
         {
             use Notifiable;
             use LaratrustUserTrait; // LaraTrust


             protected $guard = 'customer';

             protected $fillable = [
                 'name', 'email', 'password',
             ];

             protected $hidden = [
                 'password', 'remember_token',
             ];
         }

#8 ------------------------------

 #-  Edit user_models in config/laratrust.php

            'user_models' => [
                'users' => \App\User::class,
                'admins' => \App\Admin::class,
                'customers' => \App\Customer::class,

            ],
#9 ------------------------------
Define the guards
    Laravel guards define how users are authenticated for each request.
    Laravel comes with some guards for authentication,
    but we can also create ours as well. This will enable us to use Laravel’s default authentication
    system with our Admin and Customer models as well.

    Open config/auth.php and add the new guards edit as follows:
    // config/auth.php

        <?php

        [...]
        'guards' => [
            [...]
            'admin' => [
                'driver' => 'session',
                'provider' => 'admins',
            ],
            'customer' => [
                'driver' => 'session',
                'provider' => 'customers',
            ],
        ],
        [...]

        We added two new guards admin and customer and set their providers. These providers tell Laravel what to use
        for authentication or validation when we try to use the guard.

        Now, add the following to the providers array:

         // config/auth.php

            [...]
            'providers' => [
                [...]
                'admins' => [
                    'driver' => 'eloquent',
                    'model' => App\Admin::class,
                ],
                'customers' => [
                    'driver' => 'eloquent',
                    'model' => App\Customer::class,
                ],
            ],
            [...]
         Now, we have set up the providers we defined along with the guards above. We set the driver to be
         eloquent since we are using Eloquent ORM as our database manager.

         Let’s say we wish to use another ORM like RedBeanPHP for managing our database, we can then set the driver
         to say redbeanphp instead of eloquent. For the model, we pass the model we want that provider to use.

#10 ------------------------------
Create Seeds for Customer , and Admins
    Database: Seeding

    Introduction
    Laravel includes a simple method of seeding your database with test data using seed classes.
    All seed classes are stored in the database/seeds directory. Seed classes may have any name you wish,
    but probably should follow some sensible convention, such as UserSeeder, etc. By default, a DatabaseSeeder class is defined for you.
    From this class, you may use the call method to run other seed classes, allowing you to control the seeding order.

    1- *****Writing Seeders
        To generate a seeder, execute the make:seeder Artisan command. All seeders generated by the framework will be placed in the database/seeds directory:
            $ php artisan make:seeder AdminSeeder
            $ php artisan make:seeder CustomerSeeder


        A seeder class only contains one method by default: run.
        This method is called when the db:seed Artisan command is executed.
        Within the run method, you may insert data into your database however you wish.
        You may use the query builder to manually insert data or you may use Eloquent model factories.

        let's modify the default DatabaseSeeder ( AdminSeeder, CustomerSeeder ) class and add a database insert statement to the run method:

        <?php

        use Illuminate\Database\Seeder;
        use Illuminate\Support\Facades\DB;
        use Illuminate\Support\Facades\Hash;
        use Illuminate\Support\Str;

        class AdminSeeder$$CustomerSeeder extends Seeder
        {
            /**
             * Run the database seeds.
             *
             * @return void
             */
            public function run()
            {
                DB::table('admins&&Customer')->insert([
                    'name' => Str::random(10),
                    'email' => Str::random(10).'@gmail.com',
                    'password' => Hash::make('password'),
                ]);
            }
        }

    2- *****Calling Additional Seeders

        Within the DatabaseSeeder class, you may use the call method to execute additional seed classes.
        Using the call method allows you to break up your database seeding into multiple files so that no single seeder
        class becomes overwhelmingly large. Pass the name of the seeder class you wish to run:

        /**
         * Run the database seeds.
         *
         * @return void
         */
        public function run()
        {
        // NOTE: With laratrustSeed (LaratrustSeeder::class)
            $this->call([
                AdminSeeder::class,
                CustomerSeeder::class,
            ]);
        }

    3- *****Running Seeders
        Once you have written your seeder, you may need to regenerate Composer's autoloader using the dump-autoload command:

                $ composer dump-autoload

        Now you may use the db:seed Artisan command to seed your database. By default, the db:seed command runs the DatabaseSeeder class, which may be used to call other seed classes. However, you may use the --class option to specify a specific seeder class to run individually:

                $ php artisan db:seed

                $ php artisan db:seed --class=NameSeeder

        You may also seed your database using the migrate:fresh command, which will drop all tables and re-run all of your migrations. This command is useful for completely re-building your database:

                $ php artisan migrate:fresh --seed

        Forcing Seeders To Run In Production
        Some seeding operations may cause you to alter or lose data. In order to protect you from running seeding commands against your production database, you will be prompted for confirmation before the seeders are executed. To force the seeders to run without a prompt, use the --force flag:

                $ php artisan db:seed --force


#11 ------------------------------
Set up the controllers
     To use our guards ( Which Define in #9 ) for authentication, we can either modify the existing authentication controllers or create new ones.
        You can choose which to use based on your specific needs.
        In this , we will modify these controllers.
        If Controllers Not Existing You can:
        Init default controllers:
         {
            Laravel UI
            Laravel UI is a new first-party package that extracts the UI portion of a Laravel project into a separate laravel/ui package.
            The separate package enables the Laravel team to iterate on the UI package separately from the main Laravel codebase.

            You can install the laravel/ui package via composer using the following command:

                $ composer require laravel/ui

            Once you’ve installed laravel/ui you have a couple of commands available to generate UI code, including authorization.

            If you intend to use Vue, React, or Bootstrap, the UI package provides the following command:

                $ php artisan ui --help

               $ php artisan ui bootstrap --auth
               $ php artisan ui react --auth
               $ php artisan ui vue --auth

               Please run "npm install && npm run dev" to compile your fresh scaffolding
         }

    [Note]:
           {
            The attempt method will return true if authentication was successful. Otherwise, false will be returned
            The { intended } method on the redirector will redirect the user to the URL they were attempting to access before being intercepted by the authentication middleware.
            A fallback URI may be given to this method in case the intended destination is not available.
            }
    1- ***** Modify LoginController *****

             Open the LoginController in app/Http/Controllers/Auth and edit as follows:

                 // app/Http/Controllers/Auth/LoginController.php

                 <?php

                 namespace App\Http\Controllers\Auth;

                 use App\Http\Controllers\Controller;
                 use Illuminate\Foundation\Auth\AuthenticatesUsers;
                 [...]
                 use Illuminate\Http\Request;
                 use Auth;
                 [...]
                 class LoginController extends Controller
                 {
                     [...]
                     public function __construct()
                     {
                         $this->middleware('guest')->except('logout');
                         $this->middleware('guest:admin')->except('logout');
                         $this->middleware('guest:customer')->except('logout');
                     }
                     [...]
                 }
            We set the middleware to restrict access to this controller or its methods. It is important we defined all the different types of guests in the controller. This way, if one type of user is logged in and you try to use another user type to log in, it will redirect you to a predefined authentication page.

            See it this way: If I log in on my computer as an administrator, and my colleague who is a customer also tries to log into his account as a customer, he will not be able to.

            This check is important, so we do not mess up session information and potentially corrupt our application data.
            ------------------------------------
            ------------------------------------
            Now, define the login for admins:
            // app/Http/Controllers/Auth/LoginController.php

                [...]
                ////////////////// Begin Admin Methods ///////////////////
                public function showAdminLoginForm()
                {
                    return view('auth.login', ['url' => 'admin']);
                }

                public function adminLogin(Request $request)
                {
                    $this->validate($request, [
                        'email'   => 'required|email',
                        'password' => 'required|min:6'
                    ]);

                    if (Auth::guard('admin')->attempt(['email' => $request->email, 'password' => $request->password], $request->get('remember'))) {

                        return redirect()->intended('/admin');
                    }
                    return back()->withInput($request->only('email', 'remember'));
                }

                ////////////////// End Admin Methods ///////////////////
                [...]

                We have set up a method to return the login page for an admin. We will use the same page for all the user types and only change the URL they get sent to. Saves us a lot of code we could avoid writing.

                We also defined the adminLogin method which checks that the right credentials are supplied. Then we attempt to log a user in with the admin guard. It is important we set this guard when attempting a login so that the Auth facade will check the right table matching credentials. It will also set up our authentication so we can restrict pages based on the type of user who is logged in.

                We redirect an authenticated user to a specific URL and send an unauthenticated user back to the login page.

            ------------------------------------
            ------------------------------------

            Now, let us do the same thing but for the customers:

                // app/Http/Controllers/Auth/LoginController.php

                [...]
                ////////////////// Begin Customer Methods /////////////////
                public function showCustomerLoginForm()
                {
                    return view('auth.login', ['url' => 'customer']);
                }

                public function customerLogin(Request $request)
                {
                    $this->validate($request, [
                        'email'   => 'required|email',
                        'password' => 'required|min:6'
                    ]);

                    if (Auth::guard('customer')->attempt(['email' => $request->email, 'password' => $request->password], $request->get('remember'))) {

                        return redirect()->intended('/customer');
                    }
                    return back()->withInput($request->only('email', 'remember'));
                }
                ////////////////// End Customer Methods /////////////////

                [...]
            And our login is set. Hurray!!!

    2- ***** Modify RegisterController *****

            Open the RegisterController and edit as follows:
            // app/Http/Controllers/Auth/RegisterController.php

                <?php
                [...]
                namespace App\Http\Controllers\Auth;
                use App\User;
                use App\Admin;
                use App\Customer;
                use App\Http\Controllers\Controller;
                use Illuminate\Support\Facades\Hash;
                use Illuminate\Support\Facades\Validator;
                use Illuminate\Foundation\Auth\RegistersUsers;
                use Illuminate\Http\Request;
                [...]
                class RegisterController extends Controller
                {
                    [...]
                    public function __construct()
                    {
                        $this->middleware('guest');
                        $this->middleware('guest:admin');
                        $this->middleware('guest:customer');
                    }
                  [...]
                }

            We have set up the middleware the controller will use, just like we did with the LoginController.

            -------------------------
                ////////////////////// Begin Edit Validation Methods //////////////////
                To make sure that  The input Email is Unique in All Users Tables ( users, admins, customers )
                        protected function validator(array $data)
                        {
                            return Validator::make($data, [
                                'name' => ['required', 'string', 'max:255'],
                                'email' => ['required', 'string', 'email', 'max:255', 'unique:users', 'unique:admins', 'unique:customers'],
                                'password' => ['required', 'string', 'min:8', 'confirmed'],
                            ]);
                        }
                ////////////////////// End Edit Validation Methods //////////////////
                #####################################################################
            -------------------------

            Now, let us set up the methods to return the registration pages for the different users:
                 // app/Http/Controllers/Auth/RegisterController.php

                     [...]
                ////////////////// Begin Admin Methods ///////////////////

                     public function showAdminRegisterForm()
                     {
                         return view('auth.register', ['url' => 'admin']);
                     }

                ////////////////// End Admin Methods ///////////////////
                --------------------------------------------------------
                ////////////////// Begin Customer Methods ///////////////////

                     public function showCustomerRegisterForm()
                     {
                         return view('auth.register', ['url' => 'customer']);
                     }
                ////////////////// End Customer Methods ///////////////////

                     [...]

                 This is similar to what we did for showing different login pages.

             ##################################

                Now, we can define our methods for creating an admin:

                     // app/Http/Controllers/Auth/RegisterController.php

                     [...]
                     protected function createAdmin(Request $request)
                     {
                         $this->validator($request->all())->validate();
                         $admin = Admin::create([
                             'name' => $request['name'],
                             'email' => $request['email'],
                             'password' => Hash::make($request['password']),
                         ]);
                         return redirect()->intended('login/admin');
                     }
                     [...]

              ##################################

                     Next, let us define methods for creating a customer:

                         // app/Http/Controllers/Auth/RegisterController.php

                         [...]
                         protected function createCustomer(Request $request)
                         {
                             $this->validator($request->all())->validate();
                             $customer = Customer::create([
                                 'name' => $request['name'],
                                 'email' => $request['email'],
                                 'password' => Hash::make($request['password']),
                             ]);
                             return redirect()->intended('login/customer');
                         }
                         [...]
                     And registration is complete.

#12 --------------------------
Set up authentication pages
    We will use Laravel’s auth scaffolding to generate pages and controllers for our authentication system. Run the following command to generate the authentication pages:

            For Laravel < 6
                $ php artisan make:auth

            For Laravel >=6
                $ composer require laravel/ui
                $ php artisan ui vue --auth or react or bootstrap
                $ php artisan migrate

    This will generate view files in resources/views/auth along with routes to handle basic authentication for our application. Is that cool or what?

    Open the login.blade.php file and edit as follows:

        // resources/views/auth/login.blade.php
            [...]
            <div class="container">
                <div class="row justify-content-center">
                    <div class="col-md-8">
                        <div class="card">
                            <div class="card-header"> {{ isset($url) ? ucwords($url) : ""}} {{ __('Login') }}</div>

                            <div class="card-body">
                                @isset($url)
                                <form method="POST" action='{{ url("login/$url") }}' aria-label="{{ __('Login') }}">
                                @else
                                <form method="POST" action="{{ route('login') }}" aria-label="{{ __('Login') }}">
                                @endisset
                                    @csrf
                [...]
            </div>

    *************************************

        We are checking if we passed a url parameter to the page when we called it.
        If we did, we modify the forms action to use the url parameter. We also modified the header of the form so that it
        shows the type of user based on their login parameter.

        Open the register.blade.php file and edit as follows:

            // resources/views/auth/register.blade.php

            [...]
            <div class="container">
                <div class="row justify-content-center">
                    <div class="col-md-8">
                        <div class="card">
                            <div class="card-header"> {{ isset($url) ? ucwords($url) : ""}} {{ __('Register') }}</div>

                            <div class="card-body">
                                @isset($url)
                                <form method="POST" action='{{ url("register/$url") }}' aria-label="{{ __('Register') }}">
                                @else
                                <form method="POST" action="{{ route('register') }}" aria-label="{{ __('Register') }}">
                                @endisset
                                    @csrf
                [...]
            </div>
        We replicated what we did for login page here


#13 --------------------------
Create the pages authenticated users will access

    Now that we are done setting up the login and register page, let us make the pages the admin and customers will see when they are authenticated. Open the terminal and run the following commands to create new files. Next, we will insert the corresponding code snippets to the files.

        $ touch resources/views/layouts/auth.blade.php
        $ touch resources/views/admin.blade.php
        $ touch resources/views/customer.blade.php
        $ touch resources/views/home.blade.php

        $ echo > resources/views/layouts/auth.blade.php
        $ echo > resources/views/admin.blade.php
        $ echo > resources/views/customer.blade.php
        $ echo > resources/views/home.blade.php

        Insert this code block into the auth.blade.php file:

            // resources/views/layouts/auth.blade.php

            <!DOCTYPE html>
            <html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
            <head>
                <meta charset="utf-8">
                <meta http-equiv="X-UA-Compatible" content="IE=edge">
                <meta name="viewport" content="width=device-width, initial-scale=1">

                <!-- CSRF Token -->
                <meta name="csrf-token" content="{{ csrf_token() }}">

                <title>{{ config('app.name', 'Laravel') }}</title>

                <!-- Scripts -->
                <script src="{{ asset('js/app.js') }}" defer></script>

                <!-- Fonts -->
                <link rel="dns-prefetch" href="https://fonts.gstatic.com">
                <link href="https://fonts.googleapis.com/css?family=Raleway:300,400,600" rel="stylesheet" type="text/css">

                <!-- Styles -->
                <link href="{{ asset('css/app.css') }}" rel="stylesheet">
            </head>
            <body>
                <div id="app">
                    <nav class="navbar navbar-expand-md navbar-light navbar-laravel">
                        <div class="container">
                            <a class="navbar-brand" href="{{ url('/') }}">
                                {{ config('app.name', 'Laravel') }}
                            </a>
                            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="{{ __('Toggle navigation') }}">
                                <span class="navbar-toggler-icon"></span>
                            </button>

                            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                                <!-- Left Side Of Navbar -->
                                <ul class="navbar-nav mr-auto">

                                </ul>

                                <!-- Right Side Of Navbar -->
                                <ul class="navbar-nav ml-auto">
                                    <!-- Authentication Links -->
                                   <li class="nav-item dropdown">
                                        <a id="navbarDropdown" class="nav-link dropdown-toggle" href="#" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" v-pre>
                                            Hi There <span class="caret"></span>
                                        </a>

                                        <div class="dropdown-menu dropdown-menu-right" aria-labelledby="navbarDropdown">
                                            <a class="dropdown-item" href="{{ route('logout') }}"
                                               onclick="event.preventDefault();
                                                             document.getElementById('logout-form').submit();">
                                                {{ __('Logout') }}
                                            </a>

                                            <form id="logout-form" action="{{ route('logout') }}" method="POST" style="display: none;">
                                                @csrf
                                            </form>
                                        </div>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </nav>

                    <main class="py-4">
                        @yield('content')
                    </main>
                </div>
            </body>
            </html>

    **************************************

    Next, insert this code block into the admin.blade.php file:

            // resources/views/admin.blade.php

            @extends('layouts.auth')

            @section('content')
            <div class="container">
                <div class="row justify-content-center">
                    <div class="col-md-8">
                        <div class="card">
                            <div class="card-header">Dashboard</div>

                            <div class="card-body">
                                Hi boss!
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @endsection

    #################################
    Open the customer.blade.php file and edit as follows:

            // resources/views/customer.blade.php

            @extends('layouts.auth')

            @section('content')
            <div class="container">
                <div class="row justify-content-center">
                    <div class="col-md-8">
                        <div class="card">
                            <div class="card-header">Dashboard</div>

                            <div class="card-body">
                                Hi there, awesome customer
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @endsection

           #######################################

    Finally, open the home.blade.php file and replace with the following:

               // resources/views/home.blade.php

               @extends('layouts.auth')

               @section('content')
               <div class="container">
                   <div class="row justify-content-center">
                       <div class="col-md-8">
                           <div class="card">
                               <div class="card-header">Dashboard</div>

                               <div class="card-body">
                                    Hi there, regular user
                               </div>
                           </div>
                       </div>
                   </div>
               </div>
               @endsection
