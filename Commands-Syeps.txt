#0 -------------------------
init

#1 ----------------------------
Laravel 7 redirect different pages users after login. Admin and User login redirect different page
        $ composer require laravel/ui

        $ php artisan ui bootstrap --auth
        $ php artisan ui vue --auth

        $ npm install && npm run dev

#2 ----------------------------
    Add Controllers
    - User
    - Admin

    $ php artisan make:controller AdminController
    $ php artisan make:controller UserController

       Add index Methods to controllers :
            public function index()
            {
                return view('View_name');
            }

    - Create new Two folders in Views:
            Admin Folder
            User Folder

            Note: the code in them == code in home page

#3 ----------------------------
Install Laratrust
    https://laratrust.santigarcor.me/docs/6.x/

    Installation
    1- You can install the package using composer:

        $ composer require santigarcor/laratrust

    2- Publish all the configuration files:

        $ php artisan vendor:publish --tag="laratrust"

        [WARNING]
            If this command did not publish any files, chances are, the Laratrust service provider hasn't been registered.
            Try clearing your configuration cache

                $ php artisan config:clear

    3- Run the setup command:
        [IMPORTANT]
            Before running the command go to your config/laratrust.php file and change the values according to your needs.

        $ php artisan laratrust:setup

        This command will generate the migrations, create the Role and Permission models (if you are using the teams feature it will also create a Team model)
        and will add the trait to the configured user models.

         Output: {

                Creating migration
                Migration created successfully.


                Creating Role model
                Role model created successfully.

                Creating Permission model
                Permission model created successfully.

                Adding LaratrustUserTrait to User model
                LaratrustUserTrait added successfully to App\User

         }
    -----------------------
    ######################
    4- Dump the autoloader:
         $ composer dump-autoload

    5- Run the migrations:
         $ php artisan migrate

    IMPORTANT

    If you did the steps above you are done with the configuration,
    if not, please read and follow the whole configuration process
    ///////////////////////////////////////////////////////////////////
        Migrations
        The migration will create five (or six if you use teams feature) tables in your database:

        roles — stores role records.
        permissions — stores permission records.
        teams — stores teams records (Only if you use the teams feature).
        role_user — stores polymorphic relations between roles and users.
        permission_role — stores many-to-many relations between roles and permissions.
        permission_user — stores polymorphic relations between users and permissions.

        ///////////////////////////////////////////////////////////////////
        Teams Feature
        NOTE

        The teams feature is optional, this part covers how to configure it after the installation.

        If you had your teams.enabled value set to true during the installation and automatic setup, you can skip this part.

        Set the teams.enabled value to true in your config/laratrust.php file.

        Run:

            $ php artisan laratrust:setup-teams
        Run:

            $ php artisan migrate

        Now you can use the teams feature in you code.

        Please refer to the teams concepts concepts to learn how to use them.

***** Some Info
        //////////////////////////////////////////////////////////////////////
            Role
                <?php

                namespace App;

                use Laratrust\Models\LaratrustRole;

                class Role extends LaratrustRole
                {
                }

            The Role model has three main attributes:

            name — Unique name for the Role, used for looking up role information in the application layer. For example: "admin", "owner", "employee".
            display_name — Human readable name for the Role. Not necessarily unique and optional. For example: "User Administrator", "Project Owner", "Widget Co. Employee".
            description — A more detailed explanation of what the Role does. Also, optional.
            Both display_name and description are optional; their fields are nullable in the database.

        /////////////////////////////////////////////////////////////////

                    Permission
                        <?php

                        namespace App;

                        use Laratrust\Models\LaratrustPermission;

                        class Permission extends LaratrustPermission
                        {
                        }
                    The Permission model has the same three attributes as the Role:
                        - name — Unique name for the permission, used for looking up permission information in the application layer. For example: "create-post", "edit-user", "post-payment", "mailing-list-subscribe".
                        - display_name — Human readable name for the permission. Not necessarily unique and optional. For example "Create Posts", "Edit Users", "Post Payments", "Subscribe to mailing list".
                        - description — A more detailed explanation of the Permission.
                    In general, it may be helpful to think of the last two attributes in the form of a sentence: "The permission display_name allows a user to description."

                /////////////////////////////////////////////////////////////////

                    Team
                    IMPORTANT

                    Only applies if you are using the teams feature.

                            <?php

                            namespace App;

                            use Laratrust\Models\LaratrustTeam;

                            class Team extends LaratrustTeam
                            {
                            }
                    The Team model has three main attributes:
                        - name — Unique name for the Team, used for looking up team information in the application layer. For example: "my-team", "my-company".
                        - display_name — Human readable name for the Team. Not necessarily unique and optional. For example: "My Team", "My Company".
                        - description — A more detailed explanation of what the Team does. Also, optional.
                    Both display_name and description are optional; their fields are nullable in the database.

                    /////////////////////////////////////////////////////////////////

                        User
                            <?php

                            use Laratrust\Traits\LaratrustUserTrait;

                            class User extends Model
                            {
                                use LaratrustUserTrait; // add this trait to your user model

                                ...
                            }
                        This class uses the LaratrustUserTrait to enable the relationships with Role and Permission.
                            It also adds the following methods roles(), hasRole($name), hasPermission($permission),
                                isAbleTo($permission), ability($roles, $permissions, $options), and rolesTeams() to the model.

                        /////////////////////////////////////////////////////////////////

#4 ----------------------------
Seeder
    Laratrust comes with a database seeder, this seeder helps you fill the permissions for each role
    depending on the module, and creates one user for each role.

    [NOTE]

        The seeder is going to work with the first user model inside the user_models array.
        The seeder doesn't support teams.

    1- To generate the seeder you have to run:

            $ php artisan laratrust:seeder
            and
            $ composer dump-autoload
            ------------------------
            ########################

    2- In the database/seeds/DatabaseSeeder.php file you have to add this to the run method:

           $this->call(LaratrustSeeder::class);

       [NOTE]
            If you have not run php artisan vendor:publish --tag="laratrust"
            you should run it in order to customize the roles, modules and permissions in each case.

            ////////////////// Begin Info /////////////////////
            Your config/laratrust_seeder.php file looks like this by default:

            return [
                ...
                'roles_structure' => [
                    'superadministrator' => [
                        'users' => 'c,r,u,d',
                        'payments' => 'c,r,u,d',
                        'profile' => 'r,u'
                    ],
                    'administrator' => [
                        'users' => 'c,r,u,d',
                        'profile' => 'r,u'
                    ],
                    'user' => [
                        'profile' => 'r,u',
                    ],
                    'role_name' => [
                        'module_1_name' => 'c,r,u,d',
                    ]
                ],
                'permissions_map' => [
                    'c' => 'create',
                    'r' => 'read',
                    'u' => 'update',
                    'd' => 'delete'
                ],
                ...
            ];

            To understand the role_structure you must know:

            The first level represents the roles.
            The second level represents the modules.
            The second level assignments are the permissions.
            With that in mind, you should arrange your roles, modules and permissions like this:

            return [
                'role_structure' => [
                    'role' => [
                        'module' => 'permissions',
                    ],
                ]
            ];
            #Permissions
            In case that you do not want to use the c,r,u,d permissions, you should change the permissions_map.

            For example:

            return [
                ...
                'roles_structure' => [
                    'role_name' => [
                        'module_1_name' => 'a,s,e,d',
                    ]
                ],
                'permissions_map' => [
                    'a' => 'add',
                    's' => 'show',
                    'e' => 'edit',
                    'd' => 'destroy'
                ],
                ...
            ];
            ////////////////// End Info /////////////////////
    3-
            $ php artisan db:seed

    4- to seed user
            create_users value on the laratrust_seeder config file to true

                $ php artisan db:seed
#5 ---------------------------
Administration Panel
    Laratrust comes with a simple administration panel for roles, permissions and their assignment to the users.

    Currently it supports:

        1- Permissions CRUD.
        2- Roles CRUD and permissions assignment.
        3- Assignment of roles and permission to the multiple users defined in user_models in the config/laratrust.php file.
        4- Restricting roles from being edited, deleted or removed.

        #How to use it
            1- Go to your config/laratrust.php file and change the panel.register value to true.
            2- Publish the assets used by the panel by running:
                    $ php artisan vendor:publish --tag=laratrust-assets --force

            By default the URL to access the panel is /laratrust.

            To customize the the URL and other available settings in the panel please
            go to the panel section in the config/laratrust.php file.

/////////////////////////////////////////////////////////////////////////////////////////////////
                                 Add Middleware and Guards Auth
/////////////////////////////////////////////////////////////////////////////////////////////////

#6 --------------------------------
    Edit Controller: To user Role Laratrust $ Migrate Admin and Customer

        1- Add to Admin Controller:

                public function __construct()
                {
                    $this->middleware('role:superadministrator');
                }

        2- Add to User Controller:

                    public function __construct()
                    {
                        $this->middleware('role:user');

                    }

        3- Middleware for LaraTrust
           #Configuration
           The middleware are registered automatically as role, permission and ability .
           If you want to change or customize them, go to your

            {   config/laratrust.php and set the middleware.register value to false }

            and add the following to the routeMiddleware array in { app/Http/Kernel.php }:

               'role' => \Laratrust\Middleware\LaratrustRole::class,
               'permission' => \Laratrust\Middleware\LaratrustPermission::class,
               'ability' => \Laratrust\Middleware\LaratrustAbility::class,

        4- *****Create migration for admins
               To make the admins table, run the following command:

                   $ php artisan make:migration create_admins_table

               From the database/migrations directory, open the admins migrations file and edit it as follows:
               // database/migrations/<timestamp>_create_admins_table.php

                   [...]
                   public function up()
                       {
                           Schema::create('admins', function (Blueprint $table) {
                               $table->id();
                               $table->string('name');
                               $table->string('email')->unique();
                               $table->timestamp('email_verified_at')->nullable();
                               $table->string('password');
                               $table->boolean('is_super')->default(false);
                               $table->rememberToken();
                               $table->timestamps();
                           });
                       }
                   [...]

               We have created a simple migration and defined the columns we want the admin table to have.
               Eloquent provides methods that represent datatypes of our database table. We use them to define
               the datatypes of our table columns.

        5- *****Create migration for customers
                To make the customers table, run the following command:

                    $ php artisan make:migration create_customers_table
                Now, open the customers migrations file and edit it as follows:

                    database/migrations/<timestamp>_create_customers_table.php
                    [...]
                    public function up()
                    {
                        Schema::create('customers', function (Blueprint $table) {
                            $table->increments('id');
                            $table->string('name');
                            $table->string('email')->unique();
                            $table->timestamp('email_verified_at')->nullable();
                            $table->string('password');
                            $table->boolean('is_editor')->default(false);
                            $table->rememberToken();
                            $table->timestamps();

                        });
                    }
                    [...]
                We just created a simple migration and defined the columns we want the customers table to have.
                Eloquent provides methods that represent datatypes of our database table, so it is easy to decide what
                we want each one to be.

        6- *****Migrate the database
             Now that we have defined our tables, let us migrate the database:

                 $ php artisan migrate


#7 --------------------------
Set up the models
    [Note]: {
        Add to all Models this line To user laratrust:

        <?php

        use Laratrust\Traits\LaratrustUserTrait;

        class User extends Model
        {
            use LaratrustUserTrait; // add this trait to your user model

            ...
        }

        This class uses the LaratrustUserTrait to enable the relationships with Role and Permission.
        It also adds the following methods roles(), hasRole($name), hasPermission($permission), isAbleTo($permission),
        ability($roles, $permissions, $options), and rolesTeams() to the model.
    }

    We have different classes of users for our application, and they use different database tables.
    To use these different tables for authentication, we have to define models for them.
    These models will be like the user model and extends the Authenticable class.

    1- *****Admin model
        To make the model for the admins, run the following command:

            $ php artisan make:model Admin

        Open the Admin model in app/Admin.php and add the following:

            // app/Admin.php
            <?php

            namespace App;

            use Illuminate\Notifications\Notifiable;
            use Illuminate\Foundation\Auth\User as Authenticatable;
            //////////////////////////
            use Laratrust\Traits\LaratrustUserTrait; // To Use LaraTrust
            /////////////////////////
            class Admin extends Authenticatable
            {
                use Notifiable;
                use LaratrustUserTrait; // LaraTrust

                protected $guard = 'admin';

                protected $fillable = [
                    'name', 'email', 'password',
                ];

                protected $hidden = [
                    'password', 'remember_token',
                ];
            }

            When you intend to use a model for authentication, and you plan to not use the default user guard,

            it is important you specify the guard it will use. In our case, it will use the admin guard.

            We also defined some of our database columns as fillable by putting them in the fillable array. This tells Laravel the following about the model:

            When I call your create or update method and I pass you an array, take only these items (read: items in the fillable array).

            This way, we will prevent a scenario where a user can bypass any of our checks and insert or update a record we do not wish for them to update.

            For the hidden array, we tell Laravel not to return those columns when we return the model to either our API or view.


    2- *****Customers model

     To make the model for the customers, run the following command:

         $ php artisan make:model Customer
     Then open the Customer model and replace with the following:

         // app/Customer.php
         <?php

         namespace App;

         use Illuminate\Notifications\Notifiable;
         use Illuminate\Foundation\Auth\User as Authenticatable;
         //////////////////////////
         use Laratrust\Traits\LaratrustUserTrait; // To Use LaraTrust
         /////////////////////////

         class Customer extends Authenticatable
         {
             use Notifiable;
             use LaratrustUserTrait; // LaraTrust


             protected $guard = 'customer';

             protected $fillable = [
                 'name', 'email', 'password',
             ];

             protected $hidden = [
                 'password', 'remember_token',
             ];
         }
